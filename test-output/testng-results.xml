<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="12" passed="11" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-02-05T10:45:44 IST" name="Default suite" finished-at="2024-02-05T10:46:13 IST" duration-ms="28347">
    <groups>
    </groups>
    <test started-at="2024-02-05T10:45:44 IST" name="Default test" finished-at="2024-02-05T10:46:13 IST" duration-ms="28347">
      <class name="worldClockPackage.testclooock">
        <test-method is-config="true" signature="openpage()[pri:0, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:45:44 IST" name="openpage" finished-at="2024-02-05T10:46:11 IST" duration-ms="26953" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openpage -->
        <test-method signature="Test_WorldClock_Title()[pri:1, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:11 IST" name="Test_WorldClock_Title" finished-at="2024-02-05T10:46:12 IST" duration-ms="395" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_WorldClock_Title -->
        <test-method signature="BangaloreWatch_Title()[pri:2, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="BangaloreWatch_Title" finished-at="2024-02-05T10:46:12 IST" duration-ms="99" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BangaloreWatch_Title -->
        <test-method signature="Bangalore_Time()[pri:3, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="Bangalore_Time" finished-at="2024-02-05T10:46:12 IST" duration-ms="224" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [10:46 AM] but found [10:46AM]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [10:46 AM] but found [10:46AM]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at worldClockPackage.testclooock.Bangalore_Time(testclooock.java:66)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Bangalore_Time -->
        <test-method signature="Bangalore_Date()[pri:4, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="Bangalore_Date" finished-at="2024-02-05T10:46:12 IST" duration-ms="155" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Bangalore_Date -->
        <test-method signature="LondonWatch_Tittle()[pri:5, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="LondonWatch_Tittle" finished-at="2024-02-05T10:46:12 IST" duration-ms="49" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LondonWatch_Tittle -->
        <test-method signature="London_Time()[pri:6, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="London_Time" finished-at="2024-02-05T10:46:12 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- London_Time -->
        <test-method signature="London_Date()[pri:7, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="London_Date" finished-at="2024-02-05T10:46:12 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- London_Date -->
        <test-method signature="London_Timegap()[pri:8, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="London_Timegap" finished-at="2024-02-05T10:46:12 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- London_Timegap -->
        <test-method signature="NY_Watchtittle()[pri:9, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="NY_Watchtittle" finished-at="2024-02-05T10:46:12 IST" duration-ms="48" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NY_Watchtittle -->
        <test-method signature="NY_Time()[pri:10, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="NY_Time" finished-at="2024-02-05T10:46:12 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NY_Time -->
        <test-method signature="NY_Date()[pri:11, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="NY_Date" finished-at="2024-02-05T10:46:12 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NY_Date -->
        <test-method signature="NY_Timegap()[pri:12, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="NY_Timegap" finished-at="2024-02-05T10:46:12 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NY_Timegap -->
        <test-method is-config="true" signature="close()[pri:0, instance:worldClockPackage.testclooock@78691363]" started-at="2024-02-05T10:46:12 IST" name="close" finished-at="2024-02-05T10:46:13 IST" duration-ms="300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- close -->
      </class> <!-- worldClockPackage.testclooock -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
